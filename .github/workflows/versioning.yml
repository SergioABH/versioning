name: Versioning

on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed
  push:
    branches:
      - main

jobs:
  version:
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref != 'refs/heads/main')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm install

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Determine Version
        id: determine_version
        run: |
          base_branch=$(jq -r .pull_request.base.ref $GITHUB_EVENT_PATH)
          branch_name=$(jq -r .pull_request.head.ref $GITHUB_EVENT_PATH)

          if [[ $base_branch == 'dev' ]]; then
            if [[ $branch_name == *feat/* ]]; then
              if [[ ${{ github.event.action }} == 'opened' ]]; then
                npm version preminor
              elif [[ ${{ github.event.action }} == 'synchronize' ]]; then
                npm version prerelease
              elif [[ ${{ github.event.action }} == 'closed' && ${{ github.event.pull_request.merged }} == 'true' ]]; then
                npm version minor
              fi
            elif [[ $branch_name == *fix/* ]]; then
              if [[ ${{ github.event.action }} == 'opened' ]]; then
                npm version prepatch
              elif [[ ${{ github.event.action }} == 'synchronize' ]]; then
                npm version prerelease
              elif [[ ${{ github.event.action }} == 'closed' && ${{ github.event.pull_request.merged }} == 'true' ]]; then
                npm version patch
              fi
            fi
          
          elif [[ $base_branch == 'qa' ]]; then
            if [[ $branch_name == 'dev' ]]; then
              if [[ ${{ github.event.action }} == 'closed' && ${{ github.event.pull_request.merged }} == 'true' ]]; then
                npm version minor
              fi
            fi
          
          elif [[ $base_branch == 'main' ]]; then
            if [[ $branch_name == *hotfix/* ]]; then
              if [[ ${{ github.event.action }} == 'opened' ]]; then
                npm version prepatch
              elif [[ ${{ github.event.action }} == 'synchronize' ]]; then
                npm version prerelease
              elif [[ ${{ github.event.action }} == 'closed' && ${{ github.event.pull_request.merged }} == 'true' ]]; then
                npm version patch
              fi
            elif [[ $branch_name == *release/* ]]; then
              if [[ ${{ github.event.action }} == 'opened' ]]; then
                npm version prerelease --preid=rc
              elif [[ ${{ github.event.action }} == 'synchronize' ]]; then
                npm version prerelease --preid=rc
              elif [[ ${{ github.event.action }} == 'closed' && ${{ github.event.pull_request.merged }} == 'true' ]]; then
                npm version major
              fi
            fi
          fi

          echo "::set-output name=base_branch::$base_branch"
          echo "::set-output name=branch_name::$branch_name"

      - name: Get New Version
        id: get_version
        run: echo "::set-output name=version::$(npm version)"

      - name: Commit and Push Version Update
        run: |
          base_branch=${{ steps.determine_version.outputs.base_branch }}
          branch_name=${{ steps.determine_version.outputs.branch_name }}
          version=${{ steps.get_version.outputs.version }}

          echo "Base branch: $base_branch"
          echo "Branch name: $branch_name"
          echo "Version: $version"

          git fetch origin $base_branch:$base_branch || true
          git checkout $base_branch || true

          git add .
          git commit -am "Update version $version" || true
          git checkout $base_branch
          git push origin $base_branch --follow-tags || true        
        shell: bash

  hotfix:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check if it's a pull request
        run: |
          if [ -n "$GITHUB_EVENT_PATH" ]; then
            EVENT_TYPE=$(jq --raw-output .event_name "$GITHUB_EVENT_PATH")
            IS_PULL_REQUEST=$(jq --raw-output .pull_request.url "$GITHUB_EVENT_PATH")

            if [ "$EVENT_TYPE" == "pull_request" ] && [ "$IS_PULL_REQUEST" != "null" ]; then
              echo "This is a pull request event. Skipping the hotfix pipeline."
              exit 0
            fi
          fi

      - name: Configure Git user
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

      - name: Create hotfix branch with a commit
        run: |
          git checkout main
          git pull origin main
          git checkout -b hotfix/branch
          echo "Hotfix commit" >> hotfix-file.txt
          git add .
          git commit -m "Hotfix commit"
          git push origin hotfix/branch

      - name: Push hotfix branch
        run: |
          git push origin hotfix/branch

      - name: Open pull request with curl
        run: |
          PR_TITLE="Hotfix"

          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            -d '{"title":"'"$PR_TITLE"'","head":"hotfix/branch","base":"main"}' \
            "https://api.github.com/repos/${{ github.repository }}/pulls"
